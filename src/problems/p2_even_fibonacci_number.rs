//! # Even Fibonacci numbers
//!
//! Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//!
//! > 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//!
//! By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
//!
//! ## References
//!
//! - <https://projecteuler.net/problem=2>

pub fn sum_even_fibonacci_numbers(max_term: usize) -> usize {
    let mut prev = 1;
    let mut curr = 2;
    let mut even_sum = 0;
    while curr <= max_term {
        if curr % 2 == 0 {
            even_sum += curr;
        }
        let next = prev + curr;
        prev = curr;
        curr = next;
    }
    even_sum
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn max_term_89() {
        let max_term = 89;
        let sum = sum_even_fibonacci_numbers(max_term);
        assert_eq!(sum, 44);
    }

    #[test]
    fn max_term_4_000_000() {
        let max_term = 4_000_000;
        let sum = sum_even_fibonacci_numbers(max_term);
        assert_eq!(sum, 4613732);
    }
}
